package Program;

import javax.swing.*;
import javax.swing.plaf.basic.BasicProgressBarUI;
import java.awt.*;

public class RoundedProgressBarUI extends BasicProgressBarUI {

    @Override
    protected void paintDeterminate(Graphics g, JComponent c) {
        Graphics2D g2d = (Graphics2D) g;
        Insets b = progressBar.getInsets(); // area for border
        int width = progressBar.getWidth();
        int height = progressBar.getHeight();
        int barRectWidth = width - (b.right + b.left);
        int barRectHeight = height - (b.top + b.bottom);

        if (barRectWidth <= 0 || barRectHeight <= 0) {
            return;
        }

        int amountFull = getAmountFull(b, barRectWidth, barRectHeight);

        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        // Draw the background
        g2d.setColor(progressBar.getBackground());
        g2d.fillRoundRect(b.left, b.top, barRectWidth, barRectHeight, barRectHeight, barRectHeight);

        // Draw the progress
        g2d.setColor(progressBar.getForeground());
        g2d.fillRoundRect(b.left, b.top, amountFull, barRectHeight, barRectHeight, barRectHeight);

        // Deal with possible text painting
        if (progressBar.isStringPainted()) {
            paintString(g, b.left, b.top, barRectWidth, barRectHeight, amountFull, b);
        }
    }

    @Override
    protected void paintIndeterminate(Graphics g, JComponent c) {
        Graphics2D g2d = (Graphics2D) g;
        Insets b = progressBar.getInsets(); // area for border
        int width = progressBar.getWidth();
        int height = progressBar.getHeight();
        int barRectWidth = width - (b.right + b.left);
        int barRectHeight = height - (b.top + b.bottom);

        if (barRectWidth <= 0 || barRectHeight <= 0) {
            return;
        }

        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        // Draw the background
        g2d.setColor(progressBar.getBackground());
        g2d.fillRoundRect(b.left, b.top, barRectWidth, barRectHeight, barRectHeight, barRectHeight);

        // Paint the bouncing box
        boxRect = getBox(boxRect);
        if (boxRect != null) {
            g2d.setColor(progressBar.getForeground());
            g2d.fillRoundRect(boxRect.x, boxRect.y, boxRect.width, boxRect.height, boxRect.height, boxRect.height);
        }

        // Deal with possible text painting
        if (progressBar.isStringPainted()) {
            paintString(g, b.left, b.top, barRectWidth, barRectHeight, barRectWidth, b);
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("Rounded ProgressBar Example");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setSize(400, 100);

            JProgressBar progressBar = new JProgressBar();
            progressBar.setUI(new RoundedProgressBarUI());
            progressBar.setStringPainted(true);
            progressBar.setValue(50);

            frame.setLayout(new BorderLayout());
            frame.add(progressBar, BorderLayout.CENTER);
            frame.setLocationRelativeTo(null);
            frame.setVisible(true);
        });
    }
}
