package Program;

import javax.swing.*;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.ComponentUI;
import javax.swing.plaf.basic.BasicButtonUI;
import javax.swing.plaf.basic.BasicCheckBoxUI;
import javax.swing.plaf.basic.BasicProgressBarUI;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.plaf.basic.BasicSliderUI;
import javax.swing.plaf.basic.BasicSpinnerUI;
import javax.swing.plaf.basic.BasicSplitPaneDivider;
import javax.swing.plaf.basic.BasicSplitPaneUI;

import java.awt.*;
import java.awt.geom.Ellipse2D;
import java.awt.geom.RoundRectangle2D;

//for JSlider
class RoundedSliderUI extends BasicSliderUI {

    public RoundedSliderUI(JSlider b) {
        super(b);
    }

    public void paintThumb(Graphics g) {
        Graphics2D g2d = (Graphics2D) g.create();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        Rectangle thumbBounds = thumbRect;
        int diameter = Math.min(thumbBounds.width+5, thumbBounds.height+5);
        int x = thumbBounds.x + (thumbBounds.width - diameter) / 2;
        int y = thumbBounds.y + (thumbBounds.height - diameter) / 2;
        Ellipse2D thumbShape = new Ellipse2D.Double(x, y, diameter, diameter);
        g2d.setColor(new Color(185, 237, 221)); // Thumb color
        g2d.fill(thumbShape);
        g2d.setColor(Color.WHITE); // Thumb border color
        g2d.draw(thumbShape);
        g2d.dispose();
    }

    public void paintTrack(Graphics g) {
        Graphics2D g2d = (Graphics2D) g.create();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        Rectangle trackBounds = trackRect;
        int trackHeight = 8;
        int trackY = trackBounds.y + (trackBounds.height - trackHeight) / 2;
        int trackX = trackBounds.x;

        // Draw the track background
        g2d.setColor(new Color(50, 50, 50));
        g2d.fillRoundRect(trackX, trackY, trackBounds.width, trackHeight, trackHeight, trackHeight);

        // Draw the track foreground
        int fillWidth = thumbRect.x - trackRect.x + thumbRect.width / 2;
        g2d.setColor(new Color(185, 237, 221));
        g2d.fillRoundRect(trackX, trackY, fillWidth, trackHeight, trackHeight, trackHeight);
		
        //focus color
        g2d.setColor(new Color(0, 255, 170));
        g2d.fillRoundRect(trackX, trackY, fillWidth, trackHeight, trackHeight, trackHeight);
        
		
        g2d.dispose();
        
    }
    
    //paint ticks
	public void paintTicks(Graphics g) {
		Rectangle tickBounds = tickRect;
		g.setColor(Color.WHITE);
		for (int i = 0; i < slider.getMaximum(); i++) {
			int x = xPositionForValue(i);
			g.drawLine(x, tickBounds.y, x, tickBounds.y + tickBounds.height);
		}
	}

}
//for JList
class RoundedCellRenderer extends JPanel implements ListCellRenderer<String>{

	private static final long serialVersionUID = -583456799016340225L;

		private JLabel label;

        RoundedCellRenderer() {
            setLayout(new BorderLayout());
            label = new JLabel();
            label.setOpaque(false);
            label.setBorder(new EmptyBorder(10, 10, 10, 10));
            add(label, BorderLayout.CENTER);
            setOpaque(false);
        }

        public Component getListCellRendererComponent(JList<? extends String> list, String value, int index, boolean isSelected, boolean cellHasFocus) {
            label.setText(value);

            if (isSelected) {
                label.setForeground(list.getSelectionForeground());
                setBackground(new Color(0, 255, 170)); // Mint color for text when selected
            } else {
                label.setForeground(list.getForeground());
                setBackground(new Color(32,32,32)); // Default gray color
            }

            return this;
        }

        protected void paintComponent(Graphics g) {
            Graphics2D g2 = (Graphics2D) g;
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

            if (getBackground() != null) {
                if (getBackground().equals(new Color(0, 255, 170))) { // Mint gradient when selected
                    GradientPaint gradientPaint = new GradientPaint(0, 0, new Color(173, 255, 47), getWidth(), getHeight(), new Color(0, 255, 127));
                    g2.setPaint(gradientPaint);
                } else {
                    g2.setColor(getBackground());
                }
                g2.fillRoundRect(0, 0, getWidth(), getHeight(), 15, 15);
            }

            super.paintComponent(g);
        }

}
//for JProgressBar
class RoundedProgressBarUI extends BasicProgressBarUI {

    protected void paintDeterminate(Graphics g, JComponent c) {
        Graphics2D g2d = (Graphics2D) g;
        Insets b = progressBar.getInsets(); // area for border
        int width = progressBar.getWidth();
        int height = progressBar.getHeight();
        int barRectWidth = width - (b.right + b.left);
        int barRectHeight = height - (b.top + b.bottom);

        if (barRectWidth <= 0 || barRectHeight <= 0) {
            return;
        }

        int amountFull = getAmountFull(b, barRectWidth, barRectHeight);

        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        // Draw the background
        g2d.setColor(progressBar.getBackground());
        g2d.fillRoundRect(b.left, b.top, barRectWidth, barRectHeight, barRectHeight, barRectHeight);

        // Draw the progress
        g2d.setColor(progressBar.getForeground());
        g2d.fillRoundRect(b.left, b.top, amountFull, barRectHeight, barRectHeight, barRectHeight);

        // Deal with possible text painting
        if (progressBar.isStringPainted()) {
            paintString(g, b.left, b.top, barRectWidth, barRectHeight, amountFull, b);
        }
    }

    protected void paintIndeterminate(Graphics g, JComponent c) {
        Graphics2D g2d = (Graphics2D) g;
        Insets b = progressBar.getInsets(); // area for border
        int width = progressBar.getWidth();
        int height = progressBar.getHeight();
        int barRectWidth = width - (b.right + b.left);
        int barRectHeight = height - (b.top + b.bottom);

        if (barRectWidth <= 0 || barRectHeight <= 0) {
            return;
        }

        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        // Draw the background
        g2d.setColor(progressBar.getBackground());
        g2d.fillRoundRect(b.left, b.top, barRectWidth, barRectHeight, barRectHeight, barRectHeight);

        // Paint the bouncing box
        boxRect = getBox(boxRect);
        if (boxRect != null) {
            g2d.setColor(progressBar.getForeground());
            g2d.fillRoundRect(boxRect.x, boxRect.y, boxRect.width, boxRect.height, boxRect.height, boxRect.height);
        }

        // Deal with possible text painting
        if (progressBar.isStringPainted()) {
            paintString(g, b.left, b.top, barRectWidth, barRectHeight, barRectWidth, b);
        }
    }
}
//for JSplitPane
class CustomSplitPaneUI extends BasicSplitPaneUI {

    public static ComponentUI createUI(JComponent c) {
        return new CustomSplitPaneUI();
    }

    public BasicSplitPaneDivider createDefaultDivider() {
        return new CustomSplitPaneDivider(this);
    }

    class CustomSplitPaneDivider extends BasicSplitPaneDivider {

        private static final long serialVersionUID = 1L;

        public CustomSplitPaneDivider(BasicSplitPaneUI ui) {
            super(ui);
            setBackground(new Color(32,32,32));  // Set the background color for the divider
        }

        public void paint(Graphics g) {
            super.paint(g);
            Graphics2D g2d = (Graphics2D) g;
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

            int dragAreaWidth = 20;  // Width of the custom drag area
            int dragAreaHeight = getHeight();
            int x = (getWidth() - dragAreaWidth) / 2;
            int y = 0;

            // Draw the custom drag area
            g2d.setColor(new Color(50, 50, 50));
            setBackground(new Color(32,32,32));
            g2d.fillRoundRect(x, y, dragAreaWidth, dragAreaHeight, 50, 50);
            setBorder(new EmptyBorder(50, 0, 50, 0));

            
        }
    }
}
//for JScrollBar
class CustomRoundedScrollBarUI extends BasicScrollBarUI {
	private static final int ARC_WIDTH = 10;
	private static final int ARC_HEIGHT = 10;

    protected JButton createDecreaseButton(int orientation) {
        return createZeroButton();
    }
  
    protected JButton createIncreaseButton(int orientation) {
        return createZeroButton();
    }

    private JButton createZeroButton() {
        JButton jbutton = new JButton();
        jbutton.setPreferredSize(new Dimension(0, 0));
        jbutton.setMinimumSize(new Dimension(0, 0));
        jbutton.setMaximumSize(new Dimension(0, 0));
        return jbutton;
    }

	protected void paintTrack(Graphics g, JComponent c, Rectangle trackBounds) {
		Graphics2D g2d = (Graphics2D) g.create();
		g2d.setColor(new Color(32, 32, 32));
		g2d.fillRoundRect(trackBounds.x, trackBounds.y, trackBounds.width, trackBounds.height, ARC_WIDTH, ARC_HEIGHT);
		g2d.dispose();
	}

	protected void paintThumb(Graphics g, JComponent c, Rectangle thumbBounds) {
		Graphics2D g2d = (Graphics2D) g.create();
		g2d.setColor(new Color(50, 50, 50));
		g2d.fillRoundRect(thumbBounds.x, thumbBounds.y, thumbBounds.width, thumbBounds.height, ARC_WIDTH, ARC_HEIGHT);
		g2d.dispose();
	}
}


//for JButton
class RoundedButtonUI extends BasicButtonUI {

    public void paint(Graphics g, JComponent c) {
        Graphics2D g2 = (Graphics2D) g.create();
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        AbstractButton button = (AbstractButton) c;
        ButtonModel model = button.getModel();
        g2.setColor(new Color(185, 237, 221));
        
        //color when clicked
        if (model.isRollover()) {
        	g2.setColor(new Color(0, 255, 170));
    
        }
        
        g2.fillRoundRect(0, 0, button.getWidth(), button.getHeight(), 20, 20);
        if (model.isPressed() || model.isArmed()) {
            g2.setColor(button.getBackground().darker());
        } else {
            g2.setColor(button.getBackground().brighter());
        }
        

        g2.drawRoundRect(0, 0, button.getWidth() - 1, button.getHeight() - 1, 20, 20);
        g2.setColor(button.getForeground());
        FontMetrics fm = g2.getFontMetrics();
        Rectangle r = button.getBounds();
        String text = button.getText();
        int x = (r.width - fm.stringWidth(text)) / 2;
        int y = (r.height - fm.getHeight()) / 2 + fm.getAscent();
        g2.drawString(text, x, y);

		if (model.isPressed() || model.isArmed()) {
			g2.setColor(button.getBackground().darker());
			g2.fillRoundRect(0, 0, button.getWidth(), button.getHeight(), 20, 20);
		}
        
        g2.dispose();
    }
   
    
	
}
//for titled border
class RoundedTitledBorder extends AbstractBorder {
    /**
	 * 
	 */
	private static final long serialVersionUID = -8125564264313692991L;
	private final String title;
    private final int arcWidth;
    private final int arcHeight;
    private final int titlePosition;
    private final Font titleFont;
    private final Color titleColor;

    public RoundedTitledBorder(String title, int arcWidth, int arcHeight, int titlePosition, Font titleFont, Color titleColor) {
        this.title = title;
        this.arcWidth = arcWidth;
        this.arcHeight = arcHeight;
        this.titlePosition = titlePosition;
        this.titleFont = titleFont;
        this.titleColor = titleColor;
    }

    public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {
        Graphics2D g2 = (Graphics2D) g.create();
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        // Draw rounded rectangle border
        g2.setColor(Color.GRAY); // You can set your desired border color
        g2.drawRoundRect(x, y, width - 1, height - 1, arcWidth, arcHeight);

        // Draw the title
        FontMetrics fm = g2.getFontMetrics(titleFont);
        int titleHeight = fm.getHeight();
        int titleWidth = fm.stringWidth(title);

        int titleX = x + 10; // Margin from the left edge
        int titleY = y + titleHeight;

        if (titlePosition == TitledBorder.TOP) {
            titleY = y + titleHeight +50;
        } else if (titlePosition == TitledBorder.BOTTOM) {
            titleY = y + height - 10;
        }

        g2.setFont(titleFont);
        g2.setColor(titleColor);
        g2.drawString(title, titleX, titleY);

        g2.dispose();
    }

    public Insets getBorderInsets(Component c, Insets insets) {
        insets.set(20, 10, 10, 10); // Adjust the insets as needed
        return insets;
    }

    public boolean isBorderOpaque() {
        return false;
    }
    
    
}


